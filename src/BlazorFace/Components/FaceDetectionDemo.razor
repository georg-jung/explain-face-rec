@inherits ChooseSingleImageBase

@using FaceAiSharp;
@using FaceAiSharp.Extensions;
@using SixLabors.ImageSharp.Drawing.Processing;
@using SixLabors.ImageSharp.PixelFormats;
@using BlazorFace.Components

@inject IJSRuntime JS
@inject ObjectPool<IFaceDetectorWithLandmarks> detectorPool

<div class="d-flex flex-row align-items-center justify-content-center row mb-3">
    <span class="col-12 col-sm-auto mb-2 mb-sm-0 text-center">Bounding Box Color:</span>
    <MultiChoiceRadio Class="col-auto" Choices="@(new[] {Yellow, Red, Blue, Green})" @bind-SelectedChoice="@_bboxColorString" />
</div>

<p class="d-flex flex-row align-items-center row justify-content-center">
    <div class="col-12 col-sm-8 col-lg-4">
        @{
            var thresholdId = Guid.NewGuid().ToString("n");
        }
        <label for="@thresholdId" class="form-label">Detection Threshold: @_detectionThreshold.ToString("0.00")</label>
        <input
            @bind-value="@_detectionThreshold"
            @bind-value:event="oninput"
            @bind-value:culture="@System.Globalization.CultureInfo.InvariantCulture"
            type="range" class="form-range" min="0.01" max="1.0" step="0.01" id="@thresholdId">
    </div>
</p>

@{
    base.BuildRenderTree(__builder);
}

<div class="d-flex flex-row justify-content-center mt-3 restrict-child-image-size">
    <img id="@imgId" class="mw-100" />
</div>

@code {
    private const string Yellow = nameof(Yellow);
    private const string Red = nameof(Red);
    private const string Blue = nameof(Blue);
    private const string Green = nameof(Green);

    private readonly string imgId = Guid.NewGuid().ToString("n");

    private float _detectionThreshold = 0.5f;

    private string _bboxColorString = Yellow;
    private Color _bboxColor => _bboxColorString switch
    {
        Red => Color.Red,
        Yellow => Color.Yellow,
        Blue => Color.DeepSkyBlue,
        Green => Color.LimeGreen,
        _ => throw new NotImplementedException(),
    };

    protected override async Task Clear()
    {
        await base.Clear();
        await JS.ClearImage(imgId);
    }

    protected override async Task<string?> OnImageLoadedAsync(Image<Rgb24> image)
    {
        var det = detectorPool.Get();

        try
        {
            int DrawDetections()
            {
                var scrfd = (FaceAiSharp.ScrfdDetector)det;
                var old = scrfd.Options.ConfidenceThreshold;
                scrfd.Options.ConfidenceThreshold = _detectionThreshold;
                var detections = det.DetectFaces(image);
                scrfd.Options.ConfidenceThreshold = old;
                var rectangles = detections.Where(x => x.Confidence >= _detectionThreshold).Select(x => Rectangle.Round(x.Box)).ToList();

                var brush = Brushes.Solid(_bboxColor);
                image.DrawRectangles(brush, rectangles);
                return detections.Count;
            }
#if ANDROID
            var cnt = await Task.Run(DrawDetections);
#else
            var cnt = DrawDetections();
#endif
            await JS.SetImageStream(image, imgId);
            StateHasChanged();

            return cnt > 0 ? null : "No faces could be found in this image.";
        }
        finally
        {
            detectorPool.Return(det);
        }
    }
}
