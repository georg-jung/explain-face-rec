@inherits ChooseSingleImageBase

@using FaceAiSharp;
@using FaceAiSharp.Extensions;
@using SixLabors.ImageSharp.Drawing.Processing;
@using SixLabors.ImageSharp.PixelFormats;
@using BlazorFace.Components

@inject IJSRuntime JS
@inject ObjectPool<IFaceDetectorWithLandmarks> detectorPool
@inject ObjectPool<IFaceEmbeddingsGenerator> embedderPool

@{
    base.BuildRenderTree(__builder);
}

<div class="mt-3 @(IsProcessing ? "d-none" : "")">
    <div class="d-flex flex-row align-items-center justify-content-center row mb-3">
        <span class="col-md-3 col-sm-6 col-12 mb-2">Determined landmarks:</span>
        <MultiChoiceRadio Class="col-auto" Choices="@(new[] {Yellow, Red, Blue, Green, Hide})" @bind-SelectedChoice="@_predictedOverlayColorString" />
    </div>
    <div class="d-flex flex-row align-items-center justify-content-center row">
        <span class="col-md-3 col-sm-6 col-12 mb-2">Expected landmark positions:</span>
        <MultiChoiceRadio Class="col-auto" Choices="@(new[] {Yellow, Red, Blue, Green, Hide})" @bind-SelectedChoice="@_expectedOverlayColorString" />
    </div>
</div>

<style>
    .img-overlay-wrap {
        position: relative;
        display: inline-block; /* shrinks container to image size */
        transition: transform 150ms ease-in-out;
    }

        .img-overlay-wrap .overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 4;
            pointer-events: none;
        }
</style>

<div class="d-flex flex-row justify-content-center align-items-center mt-3 restrict-child-image-size">
    <div class="img-overlay-wrap">
        <ImageCompareViewer LeftLabel="Unaligned" RightLabel="Aligned">
            <img id="@imgUnalignedId" />
            <img id="@imgAlignedId" />
        </ImageCompareViewer>
        @if (_predicitonPoints != null)
        {
            @((MarkupString)SvgDrawer.DrawPoints(_predictionViewbox, _predictionViewbox.Width / 40, _predicitonPoints, $"class=\"overlay\" style=\"color: #{OverlayColor(_predictedOverlayColorString).ToHex()}\""))
        }
        @((MarkupString)SvgDrawer.DrawPoints(new Rectangle(0, 0, 112, 112), 112 / 40, ExpectedLandmarkPositions, $"class=\"overlay\" style=\"color: #{OverlayColor(_expectedOverlayColorString).ToHex()}\""))
    </div>
</div>

@code {
    private const int imgSize = 450;
    private const string Yellow = nameof(Yellow);
    private const string Red = nameof(Red);
    private const string Blue = nameof(Blue);
    private const string Green = nameof(Green);
    private const string Hide = nameof(Hide);

    // see FaceAiSharp src\FaceAiSharp\ArcFaceEmbeddingsGenerator.cs
    private static readonly IReadOnlyList<PointF> ExpectedLandmarkPositions = new List<PointF>()
    {
        new PointF(38.2946f, 51.6963f),
        new PointF(73.5318f, 51.5014f),
        new PointF(56.0252f, 71.7366f),
        new PointF(41.5493f, 92.3655f),
        new PointF(70.7299f, 92.2041f),
    }.AsReadOnly();

    private string _predictedOverlayColorString = Hide;
    private string _expectedOverlayColorString = Yellow;
    private Rectangle _predictionViewbox;
    private IReadOnlyList<PointF>? _predicitonPoints;

    private readonly string imgUnalignedId = Guid.NewGuid().ToString("n");
    private readonly string imgAlignedId = Guid.NewGuid().ToString("n");

    protected override async Task Clear()
    {
        await base.Clear();
        await JS.ClearImage(imgUnalignedId);
    }

    protected override async Task<string?> OnImageLoadedAsync(Image<Rgb24> image)
    {
#if ANDROID
    return await Task.Run(() => OnImageLoadedAsyncImpl(image));
#else
        return await OnImageLoadedAsyncImpl(image);
#endif
    }

    private Color OverlayColor(string color) => color switch
    {
        Red => Color.Red,
        Yellow => Color.Yellow,
        Blue => Color.DodgerBlue,
        Green => Color.LimeGreen,
        _ => Color.Transparent,
    };

    private async Task<string?> OnImageLoadedAsyncImpl(Image<Rgb24> image)
    {
        var det = detectorPool.Get();

        try
        {
            var detections = det.DetectFaces(image);
            if (detections.Count == 0)
            {
                return "No faces could be found in this image.";
            }

            var first = detections.FirstOrDefault();
            if (first.Landmarks is null || first.Landmarks.Count == 0)
            {
                throw new InvalidOperationException("Landmarks are required.");
            }

            _predictionViewbox = Rectangle.Round(first.Box);
            _predicitonPoints = first.Landmarks;

            using var unaligned = image.Extract(Rectangle.Round(first.Box).GetMinimumSupersetSquare(), 450, true);

            ArcFaceEmbeddingsGenerator.AlignFaceUsingLandmarks(image, first.Landmarks, 450);

            await InvokeAsync(async () =>
            {
                await JS.SetImageStream(unaligned, imgUnalignedId);
                await JS.SetImageStream(image, imgAlignedId);
                StateHasChanged();
            });

            return null;
        }
        finally
        {
            detectorPool.Return(det);
        }
    }
}
