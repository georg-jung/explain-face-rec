@using BlazorFace.Helper;
@using BlazorFace.Services;
@using Humanizer;
@using Plotly.Blazor;
@using Plotly.Blazor.Interop;
@using Plotly.Blazor.Traces;
@inject IFilenameGrouper grouper;
@inject IJSRuntime JS

@if (Embeddings is null || Embeddings.Count < 3)
{
    <p class="text-center">
        <em>Please add at least three faces to get a meaningful visualization.</em>
    </p>
    return;
}

<p class="d-flex flex-row align-items-center row">
    <span class="col-md-3 col-sm-6 col-12 mb-2">Dimensions to plot:</span>
    <MultiChoiceRadio Class="col-auto" Choices="@(new[] {TwoD, ThreeD})" @bind-SelectedChoice="@_2dOr3d" @bind-SelectedChoice:after="@ReduceDims" />
</p>
<p class="d-flex flex-row align-items-center row">
    <span class="col-md-3 col-sm-6 col-12 mb-2">Dimensionality reduction algorithm:</span>
    <MultiChoiceRadio Class="col-auto" Choices="@(new[] {PCA, UMAP})" @bind-SelectedChoice="@_pcaOrUmap" @bind-SelectedChoice:after="@ReduceDims" />
</p>
@if (UMAP.Equals(_pcaOrUmap))
{
    <p class="d-flex flex-row align-items-center row">
        <div class="col-12 col-sm-8 col-lg-4">
            @{
                var rangeId = Guid.NewGuid().ToString("n");
            }
            <label for="@rangeId" class="form-label">UMAP Number of neighbors: @_umapNeighbors</label>
            <input @bind="@_umapNeighbors" type="range" class="form-range" min="1" max="100" @bind:event="oninput" id="@rangeId">
        </div>
        <div class="mt-3 col-sm-4 col-12">
            <button class="btn btn-secondary" @onclick="@ReduceDims">Recalculate</button>
        </div>
    </p>
}

<div class="d-flex flex-md-row flex-column">
    <style>
        @@media (min-width: 768px) {
            /* md+ https://getbootstrap.com/docs/5.2/layout/breakpoints/ */
            .md-mw-20vw {
                max-width: 20vw;
            }
        }
    </style>
    <PlotlyChart @bind-Config="config" @bind-Layout="layout" @ref="chart"
                 style="aspect-ratio: 1 / 1; width: min(60vw, 60vh);"
                 HoverAction="HoverAction" AfterRender="async () => await SubscribeEvents()" />
    <div class="ms-md-4 mb-4 mb-md-0 d-flex flex-column md-mw-20vw">
        <p><em>Drag the plot to move it.</em></p>
        <p><em>Hover over a point in the scatter plot to preview the corresponding face.</em></p>
        <img id="@HoveredPointFaceImgId" class="mw-100 hovered-face-preview" style="width: 112px; height: 112px;" />
        @if (FileNames is not null && _hoveredIndex is int idx)
        {
            <code>
                @FileNames[idx]
            </code>
        }
    </div>

</div>
@if (_groups is not null && _groups.Count > 0)
{
    var cnt = 0;
    @if (_disableGrouping)
    {
        @:Automatic grouping of faces is disabled.
        <a class="link-primary" href="#" @onclick="ToggleGrouping" @onclick:preventDefault>Re-enable</a>
    }
    else
    {
        @:Based on the filenames of the uploaded images, we assume that the faces belong together as follows:
        <a class="link-primary" href="#" @onclick="ToggleGrouping" @onclick:preventDefault>Disable Grouping</a>
        <ul>
            @if (_ungrouped.Count > 0)
            {
                <li><em>No group:</em> @string.Join(", ", _ungrouped).Truncate(500)</li>
            }
            @foreach (var (k, vs) in _groups)
            {
                if (cnt == 10)
                {
                    <li>and @(_groups.Count - 10) more</li>
                    break;
                }
                cnt++;
                <li><strong>@k:</strong> @string.Join(", ", vs).Truncate(500)</li>
            }
        </ul>
    }
}

@code {
    private const string UMAP = nameof(UMAP);
    private const string PCA = nameof(PCA);
    private const string TwoD = "2D";
    private const string ThreeD = "3D";
    private const string HoveredPointFaceImgId = nameof(HoveredPointFaceImgId);

    private string _2dOr3d = ThreeD;
    private string _pcaOrUmap = PCA;
    private int _umapNeighbors = 3;
    private bool _parametersDirty = false;
    private int? _hoveredIndex;
    private Dictionary<string, List<string>>? _groups;
    private List<string> _ungrouped = new(0);
    private bool _disableGrouping = false;

    [Parameter]
    public List<byte[]>? AlignedFaceImages { get; set; }

    [Parameter]
    public List<float[]>? Embeddings { get; set; }

    [Parameter]
    public List<string>? FileNames { get; set; }

    PlotlyChart? chart;
    Config config = new Config()
    {
        Responsive = true,
    };
    Layout layout = new Layout()
        {
            Scene = new[]
                            {
                new Plotly.Blazor.LayoutLib.Scene()
                {
                    XAxis = new()
                    {
                        ShowAxesLabels = false,
                        ShowTickLabels = false,
                        ShowLine = false,
                        ZeroLine = false,
                    },
                    YAxis = new()
                    {
                        ShowAxesLabels = false,
                        ShowTickLabels = false,
                        ShowLine = false,
                        ZeroLine = false,
                    },
                    ZAxis = new()
                    {
                        ShowAxesLabels = false,
                        ShowTickLabels = false,
                        ShowLine = false,
                        ZeroLine = false,
                    },
                },
            },
            XAxis = new[]
                            {
                new Plotly.Blazor.LayoutLib.XAxis()
                {
                    ShowTickLabels = false,
                    ShowLine = false,
                    ZeroLine = false,
                }
            },
            YAxis = new[]
                            {
                new Plotly.Blazor.LayoutLib.YAxis()
                {
                    ScaleAnchor = "x",
                    ShowTickLabels = false,
                    ShowLine = false,
                    ZeroLine = false,
                }
            },
            ShowLegend = false,
        };


    protected override void OnParametersSet()
    {
        _parametersDirty = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_parametersDirty) return;
        if (Embeddings is null || Embeddings.Count < 3) return;
        if (Embeddings.Count != FileNames?.Count) return;
        if (Embeddings.Count != AlignedFaceImages?.Count) return;
        await ReduceDims();
    }

    public async Task ToggleGrouping()
    {
        _disableGrouping = !_disableGrouping;
        await ReduceDims();
    }

    public async Task ReduceDims()
    {
        // we need at least 3 embeddings for PCA to 3d
        if (Embeddings is null || Embeddings.Count < 3) return;
        if (Embeddings.Count != FileNames?.Count) throw new InvalidOperationException("FileNames.Count needs to equal Embeddings.Count");
        if (Embeddings.Count != AlignedFaceImages?.Count) throw new InvalidOperationException("AlignedFaceImages.Count needs to equal Embeddings.Count");

        var is2d = TwoD.Equals(_2dOr3d, StringComparison.Ordinal);
        var isPca = PCA.Equals(_pcaOrUmap, StringComparison.Ordinal);

        float[][] Umap()
        {
            var umap = new UMAP.Umap(dimensions: is2d ? 2 : 3, numberOfNeighbors: _umapNeighbors);
            var numEpochs = umap.InitializeFit(Embeddings.ToArray());
            for (var i = 0; i < numEpochs; i++)
                umap.Step();

            return umap.GetEmbedding();
        }

        float[][] Pca()
        {
            var embs = Embeddings.Select(arr => Array.ConvertAll(arr, x => (double)x)).ToArray();
            var pca = new Accord.Statistics.Analysis.PrincipalComponentAnalysis();
            pca.NumberOfOutputs = is2d ? 2 : 3;
            pca.Learn(embs);
            return pca.Transform(embs).Select(arr => Array.ConvertAll(arr, x => (float)x)).ToArray();
        }

        var redEmbeddings = isPca ? Pca() : Umap();

        // prepend grey for the unknown ones
        const string GreyColor = "#4e4e4e";
        var colors = _disableGrouping
            ? ColorEnumerator.RepeatForever(GreyColor)
            : ColorEnumerator.Plotly(true).Prepend(GreyColor);
        var fnColors = new Dictionary<string, string>();
        var zipped = grouper.GroupFilenames(FileNames).Zip(colors);
        _groups = new();
        foreach (var (group, color) in zipped)
        {
            group.ForEach(fn => fnColors[fn] = color);
            if (group.Key is not null)
            {
                _groups[group.Key] = new(group);
            }
            else
            {
                // we assume there is just one null grouping
                _ungrouped = new(group);
            }
        }

        var colorsInFilenameOrder = FileNames.Select(fn => (object)fnColors[fn]!).ToList();

        ITrace trace = is2d switch
        {
            true => new Scatter
                {
                    Mode = Plotly.Blazor.Traces.ScatterLib.ModeFlag.Markers,
                    X = redEmbeddings.Select(x => x[0]).Cast<object>().ToList(),
                    Y = redEmbeddings.Select(x => x[1]).Cast<object>().ToList(),
                    TextArray = FileNames.ToList(),
                    HoverInfo = Plotly.Blazor.Traces.ScatterLib.HoverInfoFlag.None,
                    Marker = new()
                    {
                        ColorArray = colorsInFilenameOrder,
                    }
                },
            false => new Scatter3D
                {
                    Mode = Plotly.Blazor.Traces.Scatter3DLib.ModeFlag.Markers,
                    X = redEmbeddings.Select(x => x[0]).Cast<object>().ToList(),
                    Y = redEmbeddings.Select(x => x[1]).Cast<object>().ToList(),
                    Z = redEmbeddings.Select(x => x[2]).Cast<object>().ToList(),
                    TextArray = FileNames.ToList(),
                    HoverInfo = Plotly.Blazor.Traces.Scatter3DLib.HoverInfoFlag.None,
                    Marker = new()
                    {
                        ColorArray = colorsInFilenameOrder,
                    }
                },
        };

        await chart!.Clear();
        await chart!.AddTrace(trace);
        _parametersDirty = false;
        StateHasChanged();
    }

    public async void HoverAction(IEnumerable<HoverEventDataPoint> e)
    {
        _hoveredIndex = e.FirstOrDefault()?.PointNumber;
        if (AlignedFaceImages is not null && _hoveredIndex.HasValue && AlignedFaceImages.Count > _hoveredIndex.Value)
        {
            await JS.SetImageStream(AlignedFaceImages[_hoveredIndex.Value], HoveredPointFaceImgId);
        }
        StateHasChanged();
    }

    public async Task SubscribeEvents()
    {
        await chart!.SubscribeHoverEvent();
    }
}
