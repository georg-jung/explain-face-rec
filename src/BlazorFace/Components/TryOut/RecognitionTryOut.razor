<p>
    If you're writing your own application, you can use the exact same face recognition mechanism that is used in the demo above from your own code.
    The following example uses C# as programming language and leverages the <a href="https://github.com/georg-jung/FaceAiSharp">FaceAiSharp</a> library.
</p>
<TryOutSteps>
    <li>
        Replace the content of the <code>Program.cs</code> file with the following code:<br />
        <HighlightedCode LanguageClass="language-csharp">
using FaceAiSharp;
using SixLabors.ImageSharp;
using SixLabors.ImageSharp.PixelFormats;

using var hc = new HttpClient();
var groupPhoto = await hc.GetByteArrayAsync(
    "https://raw.githubusercontent.com/georg-jung/FaceAiSharp/master/examples/obama_family.jpg");
var img = Image.Load&lt;Rgb24&gt;(groupPhoto);

var det = FaceAiSharpBundleFactory.CreateFaceDetectorWithLandmarks();
var rec = FaceAiSharpBundleFactory.CreateFaceEmbeddingsGenerator();

var face = det.DetectFaces(img).First();
rec.AlignFaceUsingLandmarks(img, face.Landmarks!);
var embedding = rec.GenerateEmbedding(img);
Console.WriteLine($"Generated an embedding for one face:\nn{string.Join("\t", embedding)}");</HighlightedCode>
    </li>
    <li>
        Run the program you just created:<br />
        <HighlightedCode LanguageClass="language-shell">
dotnet run</HighlightedCode>

        You should see output similar to:<br />
        <HighlightedCode LanguageClass="language-plaintext">
Generated an embedding for one face:
-0,029764613    0,13904491      -0,017976629    0,010621089     0,015310788     -0,077746354
0,026660273     -0,03839961     -0,06403088     0,023788495     -0,1461524      -0,010910285
-0,001902924    -0,07354331     -0,06590692    0,09289711       0,0023482481    0,035271123
&lt;... more numbers between -1 and 1 ...&gt;</HighlightedCode>
    </li>
</TryOutSteps>
