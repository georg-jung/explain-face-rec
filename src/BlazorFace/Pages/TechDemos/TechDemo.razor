@*@page "/TechDemo"*@
@layout LegalLayout
@using FaceAiSharp.Abstractions;
@using FaceAiSharp.Extensions;
@using Humanizer;
@using SixLabors.ImageSharp.Drawing.Processing;
@using SixLabors.ImageSharp.PixelFormats;
@inject IJSRuntime JS
@inject IClock clock;
@inject ObjectPool<IFaceDetector> detectorPool;
@inject ObjectPool<IFaceLandmarksExtractor> landmarksPool;
@inject ObjectPool<IFaceEmbeddingsGenerator> embedderPool;
@inject ObjectPool<IEyeStateDetector> eyeStatePool;

<PageTitle>Face Recognition Pipeline</PageTitle>

<div class="container mb-4">
    <p>
        To get started, please upload an image that contains one or more human faces.
    </p>

    <div class="mb-3">
        <InputFile OnChange="@LoadFiles" class="@($"form-control {(_uploadWasTooLarge || _uploadNoImage ? "is-invalid" : "")}")" style="max-width: 32rem;" />
        @if (_uploadWasTooLarge)
        {
            <div class="invalid-feedback">Maximum supported file size is @MaxUploadSize.Bytes().</div>
        }
        @if (_uploadNoImage)
        {
            <div class="invalid-feedback">The uploaded file could not be read as image.</div>
        }
    </div>
    <p>Loading image took @_uploadMs ms.</p>

    <h2 class="mt-4">1. Face Detection</h2>
    <p>Detection took @_detectionMs ms.</p>
    @if (_uploadNoFace)
    {
        <div class="alert alert-warning" role="alert">
            No face could be found in the image you uploaded.
        </div>
    }
    <img id="@ImgDetectionId" class="mw-100" />

    <h2 class="mt-4">2. First Face Crop</h2>
    <img id="@ImgFirstFaceId" class="mw-100" />

    <h2 class="mt-4">3. First Face with Landmarks</h2>
    <p>Finding landmarks took @_landmarksMs ms.</p>
    <img id="@ImgFirstFaceWithLandmarksId" class="mw-100" />
    <div class="d-flex flex-row mt-2">
        <div class="d-flex flex-column me-2">
            <img id="@ImgFirstFaceLEyeId" class="mw-100 d-none-if-no-src" style="width: 64px; height: 64px;" />
            @(_leftOpen switch { true => "Open", false => "Closed", _ => null})
        </div>
        <div class="d-flex flex-column">
            <img id="@ImgFirstFaceREyeId" class="mw-100 d-none-if-no-src" style="width: 64px; height: 64px;" />
            @(_rightOpen switch { true => "Open", false => "Closed", _ => null})
        </div>
    </div>

    <h2 class="mt-4">4. Aligned First Face</h2>
    <p>Aligning took @_alignMs ms.</p>

    @if (_angle.HasValue)
    {
        <p>
            Angle is @_angle.Value
        </p>
    }

    <img id="@ImgAlignedFirstFaceId" class="mw-100" />

    <h2 class="mt-4">5. Embeddings</h2>

    <p>
        Determining embeddings took @_embedMs ms. Total processing time was @_totalMs ms.
    </p>

    @if (_embeddings != null)
    {
        <BlazorFace.Components.ExpandableEmbeddings Embeddings="@string.Join("\n", _embeddings)" />
    }
</div>

@code {
    const int MaxUploadSize = 1024 * 1024 * 10; // 10 MB
    const string ImgDetectionId = "img-detection";
    const string ImgFirstFaceId = "img-first-face";
    const string ImgFirstFaceWithLandmarksId = "img-first-face-with-landmarks";
    const string ImgFirstFaceLEyeId = "img-first-face-leye";
    const string ImgFirstFaceREyeId = "img-first-face-reye";
    const string ImgAlignedFirstFaceId = "img-aligned-first-face";

    private bool _uploadWasTooLarge = false;
    private bool _uploadNoFace = false;
    private bool _uploadNoImage = false;
    private float? _angle;
    private bool? _leftOpen;
    private bool? _rightOpen;
    private float[]? _embeddings;

    private int? _uploadMs;
    private int? _detectionMs;
    private int? _landmarksMs;
    private int? _alignMs;
    private int? _embedMs;
    private int? _totalMs;

    private async Task Clear()
    {
        _uploadMs =
            _detectionMs =
            _landmarksMs =
            _alignMs =
            _embedMs =
            _totalMs = null;
        _uploadNoFace = _uploadWasTooLarge = _uploadNoImage = false;
        _angle = null;
        _leftOpen = _rightOpen = null;
        _embeddings = null;
        await JS.ClearImage(ImgDetectionId);
        await JS.ClearImage(ImgFirstFaceId);
        await JS.ClearImage(ImgFirstFaceWithLandmarksId);
        await JS.ClearImage(ImgAlignedFirstFaceId);
        await JS.ClearImage(ImgFirstFaceLEyeId);
        await JS.ClearImage(ImgFirstFaceREyeId);
    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        await Clear();
        var start = clock.GetCurrentInstant();
        using var file = e.TryOpen(MaxUploadSize, out _uploadWasTooLarge);
        if (file == null) return;

        using var img = await file.TryOpenImage();
        _uploadMs = (int)(clock.GetCurrentInstant() - start).TotalMilliseconds;
        if (img == null)
        {
            _uploadNoImage = true;
            StateHasChanged();
            return;
        }

        var det = detectorPool.Get();
        var lmrks = landmarksPool.Get();
        var embGen = embedderPool.Get();
        var eyeState = eyeStatePool.Get();
        try
        {
            var pivot = clock.GetCurrentInstant();
            var detection = det.Detect(img);
            _detectionMs = (int)(clock.GetCurrentInstant() - pivot).TotalMilliseconds;
            if (detection.Count == 0)
            {
                _uploadNoFace = true;
                StateHasChanged();
                return;
            }
            var rectangles = detection.Select(x => x.Box).ToList();
            var allLandmarks = detection.Select(x => x.Landmarks).SelectMany(x => x ?? Enumerable.Empty<PointF>()).ToList();
            var firstFaceLandmarks = detection.First().Landmarks!;

            var brush = Brushes.Solid(Color.Red);
            using (var imgDetected = img.DrawRectanglesAndPoints(brush, rectangles, allLandmarks))
                await JS.SetImageStream(imgDetected, ImgDetectionId);
            StateHasChanged();

            var firstFaceRect = Rectangle.Round(rectangles.FirstOrDefault());
            using var imgFirstFace = img.Extract(firstFaceRect, 250);
            await JS.SetImageStream(imgFirstFace, ImgFirstFaceId);
            StateHasChanged();

            pivot = clock.GetCurrentInstant();
            var landmarks = lmrks.Detect(imgFirstFace);
            _landmarksMs = (int)(clock.GetCurrentInstant() - pivot).TotalMilliseconds;
            using (var imgLandmarks = imgFirstFace.DrawPoints(brush, landmarks))
                await JS.SetImageStream(imgLandmarks, ImgFirstFaceWithLandmarksId);
            StateHasChanged();

            pivot = clock.GetCurrentInstant();
            _angle = det.GetFaceAlignmentAngle(firstFaceLandmarks); // lmrks.GetFaceAlignmentAngle(landmarks);

            //var angleAligned = img.Clone();
            //angleAligned.CropAlignedDestructive(firstFaceRect, _angle.Value);
            var (leye, reye) = (det.GetLeftEyeCenter(firstFaceLandmarks), det.GetRightEyeCenter(firstFaceLandmarks));

            var bx = FaceAiSharp.ImageCalculations.GetEyeBoxesFromCenterPoints(leye, reye, 3);
            var leyeImg = img.CropAligned(bx.Left, _angle.Value, 32);
            var reyeImg = img.CropAligned(bx.Right, _angle.Value, 32);
            await JS.SetImageStream(leyeImg, ImgFirstFaceLEyeId);
            await JS.SetImageStream(reyeImg, ImgFirstFaceREyeId);
            _leftOpen = eyeState.IsOpen(leyeImg);
            _rightOpen = eyeState.IsOpen(reyeImg);

            FaceAiSharp.ArcFaceEmbeddingsGenerator.AlignUsingFacialLandmarks(img, firstFaceLandmarks);
            _alignMs = (int)(clock.GetCurrentInstant() - pivot).TotalMilliseconds;
            await JS.SetImageStream(img, ImgAlignedFirstFaceId);
            StateHasChanged();

            pivot = clock.GetCurrentInstant();
            _embeddings = embGen.Generate(img);
            _embedMs = (int)(clock.GetCurrentInstant() - pivot).TotalMilliseconds;

            _totalMs = (int)(clock.GetCurrentInstant() - start).TotalMilliseconds;
            StateHasChanged();
        }
        finally
        {
            detectorPool.Return(det);
            landmarksPool.Return(lmrks);
            embedderPool.Return(embGen);
            eyeStatePool.Return(eyeState);
        }
    }
}
