@page "/2dDemo"
@layout LegalLayout
@using FaceAiSharp.Abstractions;
@using FaceAiSharp.Extensions;
@using Humanizer;
@using SixLabors.ImageSharp.Drawing.Processing;
@using SixLabors.ImageSharp.PixelFormats;
@using Plotly.Blazor
@using Plotly.Blazor.Traces
@inject IJSRuntime JS
@inject IClock clock;
@inject ObjectPool<IFaceDetector> detectorPool;
@inject ObjectPool<IFaceEmbeddingsGenerator> embedderPool;

<PageTitle>Face Recognition Pipeline</PageTitle>

<div class="container mb-4">
    <p>
        To get started, please upload images that contain one or more human faces.
    </p>

    <div class="mb-3">
        <InputFile multiple OnChange="@LoadFiles" class="@($"form-control {(_uploadNoImage ? "is-invalid" : "")}")" style="max-width: 32rem;" />
        @if (_uploadNoImage)
        {
            <div class="invalid-feedback">The uploaded file could not be read as image.</div>
        }
        @foreach (var tl in _tooLargeFiles)
        {
            <Alert class="mt-3">
                @tl was skipped because it is larger than the maximum supported file size (@MaxUploadSize.Bytes()).
            </Alert>
        }
        @foreach (var tl in _noFaceFiles)
        {
            <Alert class="mt-3">
                @tl was skipped because no face was found.
            </Alert>
        }
    </div>

    <DimReductionPlot AlignedFaceImages="_alignedFaces" Embeddings="_embeddings" FileNames="_fileNames" @ref="dimRedPlot" />
</div>

@code {
    const int MaxUploadSize = 1024 * 1024 * 10; // 10 MB

    private readonly List<string> _tooLargeFiles = new();
    private readonly List<string> _noFaceFiles = new();
    private bool _uploadNoImage = false;

    private List<byte[]> _alignedFaces = new();
    private List<float[]> _embeddings = new();
    private List<string> _fileNames = new();

    DimReductionPlot? dimRedPlot;
    
    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        _tooLargeFiles.Clear();
        _noFaceFiles.Clear();
        var files = e.TryOpenMultiple(1000, MaxUploadSize);

        foreach (var (content, name, tooLarge) in files)
        {
            if (content is null)
            {
                _tooLargeFiles.Add(name);
                continue;
            }
            await LoadFile(content, name);
        }
    }

    private async Task LoadFile(System.IO.Stream file, string fileName)
    {
        using var img = await file.TryOpenImage();
        if (img == null)
        {
            _uploadNoImage = true;
            StateHasChanged();
            return;
        }

        var det = detectorPool.Get();
        var embGen = embedderPool.Get();
        try
        {
            var detection = det.Detect(img);
            if (detection.Count == 0)
            {
                _noFaceFiles.Add(fileName);
                StateHasChanged();
                return;
            }

            var first = detection.First();
            var lmrks = first.Landmarks ?? throw new InvalidOperationException("Face detection with landmarks is required.");

            FaceAiSharp.ArcFaceEmbeddingsGenerator.AlignUsingFacialLandmarks(img, first.Landmarks);
            var emb = embGen.Generate(img);
            _embeddings.Add(emb);

            using var ms = new MemoryStream();
            img.SaveAsJpeg(ms);
            _alignedFaces.Add(ms.ToArray());

            _fileNames.Add(fileName);

            await dimRedPlot!.ReduceDims();
        }
        finally
        {
            detectorPool.Return(det);
            embedderPool.Return(embGen);
        }
    }
}
