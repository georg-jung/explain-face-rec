@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace BlazorFace.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en" class="h-100">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <meta name="theme-color" content="#ffffff">
    <link rel="stylesheet" href="css/bootstrap-5.2.3/bootstrap.min.css" />
    <link rel="stylesheet" href="bootstrap-icons-1.10.3/bootstrap-icons.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="BlazorFace.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png"/>
    <!--<link rel="icon" type="image/svg+xml" href="/favicon.svg">-->
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body class="d-flex flex-column h-100">
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">ðŸ—™</a>
    </div>

    <script src="_content/Plotly.Blazor/plotly-latest.min.js" type="text/javascript"></script>
    <script src="_content/Plotly.Blazor/plotly-interop.js" type="text/javascript"></script>
    <script src="_framework/blazor.server.js"></script>
    <script src="js/bootstrap-5.2.3/bootstrap.min.js"></script>

    <!-- https://learn.microsoft.com/en-us/aspnet/core/blazor/images?view=aspnetcore-7.0#stream-image-data -->
    <script>
        window.setImage = async (imageElementId, imageStream) => {
            const arrayBuffer = await imageStream.arrayBuffer();
            const blob = new Blob([arrayBuffer]);
            const url = URL.createObjectURL(blob);
            const image = document.getElementById(imageElementId);
            image.onload = () => {
                URL.revokeObjectURL(url);
            }
            image.src = url;
        }

        window.clearImage = async (imageElementId) => {
            const image = document.getElementById(imageElementId);
            image.removeAttribute('src', '');
        }
    </script>
</body>
</html>
