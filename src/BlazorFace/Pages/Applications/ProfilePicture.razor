@inherits ChooseSingleImageBase
@page "/Demos/ProfilePicture"
@layout GoBackLayout

@using FaceAiSharp.Abstractions;
@using SixLabors.ImageSharp.PixelFormats;
@using BlazorFace.Components

@inject IJSRuntime JS
@inject ObjectPool<IFaceDetector> detectorPool

<div class="text-center mb-4">
    <h1>Demo: Profile Picture Crop</h1>
</div>

@{
    base.BuildRenderTree(__builder);
}

<div class="d-flex flex-row justify-content-center my-4 restrict-child-image-size">
    <img id="@imgId" class="rounded me-5" />
    <img id="@imgId2" class="rounded-circle" />
</div>

<div class="container d-flex justify-content-center">
    <div class="bd-callout bd-callout-warning col-12 col-lg-8 col-md-10">
        <strong>Non-commercial use only</strong><br />
        The licenses of some of the models that can be used in this application do not allow their use for commercial purposes. The same applies accordingly to the outputs of the interactive demos.
    </div>
</div>

@code {
    private readonly string imgId = Guid.NewGuid().ToString("n");
    private readonly string imgId2 = Guid.NewGuid().ToString("n");

    protected override async Task Clear()
    {
        await base.Clear();
        await JS.ClearImage(imgId);
        await JS.ClearImage(imgId2);
    }

    protected override async Task<string?> OnImageLoadedAsync(Image<Rgb24> image)
    {
        var det = detectorPool.Get();

        try
        {
            FaceAiSharp.Applications.CropProfilePicture(det, image);
            await JS.SetImageStream(image, imgId);
            await JS.SetImageStream(image, imgId2);
            return null;
        }
        catch (ArgumentException arg)
        {
            return arg.Message;
        }
        finally
        {
            detectorPool.Return(det);
        }
    }
}
