@page "/"
@using FaceAiSharp.Abstractions;
@using FaceAiSharp.Extensions;
@using Humanizer;
@using NodaTime;
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.Drawing.Processing;
@using SixLabors.ImageSharp.PixelFormats;
@using UMapx.Imaging;
@using UMapx.Visualization;
@inject IJSRuntime JS
@inject IFaceDetector det;
@inject IFaceLandmarksExtractor lmrks;
@inject IFaceEmbeddingsGenerator embGen;
@inject IClock clock;

<PageTitle>Face Recognition Pipeline</PageTitle>

<div class="container">
    <p>
        To get started, please upload an image that contains one or more human faces.
    </p>

    <div class="mb-3">
        <InputFile OnChange="@LoadFiles" class="@($"form-control {(_uploadWasTooLarge ? "is-invalid" : "")}")" style="max-width: 32rem;" />
        @if (_uploadWasTooLarge)
        {
            <div class="invalid-feedback">Maximum supported file size is @MaxUploadSize.Bytes().</div>
        }
    </div>
    <p>Loading image took @_uploadMs ms.</p>

    <h2 class="mt-4">1. Face Detection</h2>
    <p>Detection took @_detectionMs ms.</p>
    <img id="@ImgDetectionId" class="mw-100" />

    <h2 class="mt-4">2. First Face Crop</h2>
    <img id="@ImgFirstFaceId" class="mw-100" />

    <h2 class="mt-4">3. First Face with Landmarks</h2>
    <p>Finding landmarks took @_landmarksMs ms.</p>
    <img id="@ImgFirstFaceWithLandmarksId" class="mw-100" />

    <h2 class="mt-4">4. Aligned First Face</h2>
    <p>Aligning took @_alignMs ms.</p>

    @if (_angle.HasValue)
    {
        <p>
            Angle is @_angle.Value
        </p>
    }

    <img id="@ImgAlignedFirstFaceId" class="mw-100" />

    <h2 class="mt-4">5. Embeddings</h2>

    <p>
        Determining embeddings took @_embedMs ms. Total processing time was @_totalMs ms.
    </p>

    @if (_embeddings != null)
    {
        <code>
            @string.Join("\n", _embeddings);
        </code>
    }
</div>

@code {
    const int MaxUploadSize = 1024 * 1024 * 5; // 5 MB
    const string ImgDetectionId = "img-detection";
    const string ImgFirstFaceId = "img-first-face";
    const string ImgFirstFaceWithLandmarksId = "img-first-face-with-landmarks";
    const string ImgAlignedFirstFaceId = "img-aligned-first-face";

    private bool _uploadWasTooLarge = false;
    private float? _angle;
    private float[]? _embeddings;

    private int? _uploadMs;
    private int? _detectionMs;
    private int? _landmarksMs;
    private int? _alignMs;
    private int? _embedMs;
    private int? _totalMs;

    private async Task SetImageStream(Image image, string imgId)
    {
        // async probably doesnt make a difference, given we're writing to a MemoryStream
        using var outStr = new MemoryStream();
        image.SaveAsJpeg(outStr);
        outStr.Position = 0;

        var dotnetImageStream = new DotNetStreamReference(outStr);
        await JS.InvokeVoidAsync("setImage", imgId, dotnetImageStream);
    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        Stream? TryOpen()
        {
            try
            {
                var s = e.File.OpenReadStream(MaxUploadSize);
                _uploadWasTooLarge = false;
                return s;
            }
            catch (IOException ex)
              when (ex.Message.Contains("byte", StringComparison.OrdinalIgnoreCase))
            {
                _uploadWasTooLarge = true;
                return null;
            }
        }

        var start = clock.GetCurrentInstant();
        using var file = TryOpen();
        if (file == null) return;

        using var img = await Image.LoadAsync(file);
        _uploadMs = (int)(clock.GetCurrentInstant() - start).TotalMilliseconds;

        var pivot = clock.GetCurrentInstant();
        var detection = det.Detect(img);
        _detectionMs = (int)(clock.GetCurrentInstant() - pivot).TotalMilliseconds;
        var rectangles = detection.Select(x => x.Box).ToList();

        var brush = Brushes.Solid(Color.Red);
        using (var imgDetected = img.DrawRectangles(brush, rectangles))
            await SetImageStream(imgDetected, ImgDetectionId);
        StateHasChanged();

        var firstFaceRect = rectangles.FirstOrDefault();
        using var imgFirstFace = img.Extract(firstFaceRect, 250);
        await SetImageStream(imgFirstFace, ImgFirstFaceId);
        StateHasChanged();

        pivot = clock.GetCurrentInstant();
        var landmarks = lmrks.Detect(imgFirstFace);
        _landmarksMs = (int)(clock.GetCurrentInstant() - pivot).TotalMilliseconds;
        using (var imgLandmarks = imgFirstFace.DrawPoints(brush, landmarks))
            await SetImageStream(imgLandmarks, ImgFirstFaceWithLandmarksId);
        StateHasChanged();

        pivot = clock.GetCurrentInstant();
        _angle = lmrks.GetFaceAlignmentAngle(landmarks);
        using var imgAligned = img.CropAligned(firstFaceRect, _angle.Value);
        _alignMs = (int)(clock.GetCurrentInstant() - pivot).TotalMilliseconds;
        await SetImageStream(imgAligned, ImgAlignedFirstFaceId);
        StateHasChanged();

        pivot = clock.GetCurrentInstant();
        _embeddings = embGen.Generate(imgAligned);
        _embedMs = (int)(clock.GetCurrentInstant() - pivot).TotalMilliseconds;

        GC.Collect();
        GC.WaitForPendingFinalizers();
        GC.Collect();
        _totalMs = (int)(clock.GetCurrentInstant() - start).TotalMilliseconds;
        StateHasChanged();
    }
}
