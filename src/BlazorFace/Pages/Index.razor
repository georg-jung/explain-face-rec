@page "/"
@using FaceONNX;
@using System.Drawing;
@using Humanizer;
@using UMapx.Visualization;
@inject IJSRuntime JS

<PageTitle>Face Recognition Pipeline</PageTitle>

<p>
    To get started, please upload an image that contains one or more human faces.
</p>

<div class="mb-3">
    <InputFile OnChange="@LoadFiles" class="@($"form-control {(_uploadWasTooLarge ? "is-invalid" : "")}")" style="max-width: 32rem;" />
    @if (_uploadWasTooLarge)
    {
        <div class="invalid-feedback">Maximum supported file size is @MaxUploadSize.Bytes().</div>
    }
</div>

<h2>1. Face Detection</h2>

<img id="img-detection" alt="Your upload with face marks" class="mw-100" />

@code {
    const int MaxUploadSize = 1024 * 1024 * 5; // 5 MB

    private bool _uploadWasTooLarge = false;

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        Stream? TryOpen()
        {
            try
            {
                var s = e.File.OpenReadStream(MaxUploadSize);
                _uploadWasTooLarge = false;
                return s;
            } catch (IOException ex)
              when (ex.Message.Contains("byte", StringComparison.OrdinalIgnoreCase))
            {
                _uploadWasTooLarge = true;
                return null;
            }
        }

        using var file = TryOpen();
        if (file == null) return;

        using var syncFile = new MemoryStream();
        await file.CopyToAsync(syncFile);

        using var faceDetector = new FaceDetector(0.95f, 0.5f);
        using var painter = new Painter()
        {
            BoxPen = new Pen(Color.Yellow, 4),
            Transparency = 0,
        };

        using var bitmap = new Bitmap(syncFile);
        var output = faceDetector.Forward(bitmap);

        foreach (var rectangle in output)
        {
            var paintData = new PaintData()
            {
                Rectangle = rectangle,
                Title = string.Empty
            };
            using var graphics = Graphics.FromImage(bitmap);
            painter.Draw(graphics, paintData);
        }

        var outStr = new MemoryStream(); // no using
        bitmap.Save(outStr, System.Drawing.Imaging.ImageFormat.Jpeg);
        outStr.Position = 0;

        var dotnetImageStream = new DotNetStreamReference(outStr);        
        await JS.InvokeVoidAsync("setImage", "img-detection", dotnetImageStream);
    }
}
