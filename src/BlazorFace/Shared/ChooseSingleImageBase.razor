@layout LegalLayout

@using Humanizer;
@using SixLabors.ImageSharp.PixelFormats;

@inject ILogger<ChooseSingleImageBase> log;
@inject IFileOpener opener;

<div class="container d-flex flex-column align-items-center">
    @if (_processing)
    {
        <div class="d-flex flex-row">
            <Spinner Class="me-2" />
            Processing...
        </div>
    }

    @*
    It is important that the InputFile is not destroyed/removed from the RenderTree before we got
    a Stream from the IBrowserFile. Thus, hide it instead of removing it.
    *@
    <div class="@(_processing ? "d-none" : "") d-flex flex-column align-items-center">
        <p>
            Get started with an image that contains one or more human faces.
        </p>

        <div class="d-flex flex-md-row flex-column align-items-center @_uploadIsInvalidClass">
            <div>
                <InputFile OnChange="@LoadFiles" @key=@_inputFileId class="@($"form-control {_uploadIsInvalidClass}")" style="max-width: 32rem;" />
            </div>
            <p class="m-3"><em>- or -</em></p>
            <button class="btn btn-outline-primary" @onclick=ChooseFromGalleryClick>Choose from examples</button>
        </div>

        @if (_uploadNoImage)
        {
            <div class="invalid-feedback">The uploaded file could not be read as image. Either the file you chose was to large or you didn't choose a supported image file format.</div>
        }
        @if (_uploadErrorMessage is not null)
        {
            <div class="invalid-feedback">@_uploadErrorMessage</div>
        }
    </div>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected virtual int MaxUploadSize => 1024 * 1024 * 10; // 10 MB
    protected virtual int MaxNoConversionSize => 1024 * 1024 / 2; // 0.5 MB
    protected virtual int MaxImageEdge => 1024;
    protected bool IsProcessing => _processing;

    private bool _uploadIsInvalid => _uploadNoImage || _uploadErrorMessage is not null;
    private string _uploadIsInvalidClass => _uploadIsInvalid ? "is-invalid" : "";
    private string _inputFileId = Guid.NewGuid().ToString("n");
    private bool _uploadNoImage = false;
    private string? _uploadErrorMessage = null;
    private bool _processing = false;

    /// <summary>
    /// Called when an upload is initiated but before it is processed.
    /// Calls Clear() by default.
    /// </summary>
    protected virtual Task OnBeforeLoadFileAsync()
    {
        Clear();
        return Task.CompletedTask;
    }

    /// <summary>
    /// Clears everything related to the uploaded image, except the image upload &lt;InputFile&gt; component itself.
    /// </summary>
    protected virtual Task Clear()
    {
        _uploadNoImage = false;
        _uploadErrorMessage = null;
        return Task.CompletedTask;
    }

    protected void ClearInputFile()
    {
        _inputFileId = Guid.NewGuid().ToString("n");
    }

    protected virtual Task<string?> OnImageLoadedAsync(Image<Rgb24> image)
    {
        return Task.FromResult<string?>(null);
    }

    private async Task ChooseFromGalleryClick()
    {
        await OnBeforeLoadFileAsync();
        var diag = Modal.Show<ChooseGalleryImageModal>("Choose from example gallery");
        var res = await diag.Result;
        if (res.Cancelled || res.Data is not string path)
        {
            return;
        }

        ClearInputFile();
        _processing = true;
        StateHasChanged();

        using var imgStream = await opener.OpenAsync(path);
        using var img = await Image.LoadAsync<Rgb24>(imgStream);

        // attention: a potential error message is not processed here
        await OnImageLoadedAsync(img);

        _processing = false;
        StateHasChanged();
    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        await OnBeforeLoadFileAsync();
        _processing = true;
        StateHasChanged();
        try
        {
            using var img = await e.File.TryOpenImageBrowserConverted(MaxNoConversionSize, MaxUploadSize, MaxImageEdge, MaxImageEdge, log);
            ClearInputFile();
            if (img is null)
            {
                _uploadNoImage = true;
                return;
            }

            _uploadErrorMessage = await OnImageLoadedAsync(img);
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }
}
